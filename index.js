const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
require("dotenv").config();
const dotenvExpand = require("dotenv-expand");

const apiKey = process.env.API_KEY_TELEGRAM;
const apiKeyYandex = process.env.API_KEY_YANDEX;

const token = `${apiKey}`;

const bot = new TelegramBot(token, { polling: true });

// —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–∞—à –±–æ—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª
// bot.onText(/\/stop/, (msg) => {
//   if (bot.isPolling()) {
//     bot.sendMessage(msg.chat.id, "–ü–æ–∫–∞ –±—Ä–æ, –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
//     bot.sendMessage(msg.chat.id, "üëãüèº");
//     // bot.clearCommands();
//     bot.removeAllCommands();
//     bot.stopPolling();
//   }
// });

bot.onText(/\/stop/, (msg) => {
  bot.sendMessage(msg.chat.id, "–ü–æ–∫–∞ –±—Ä–æ, –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
  bot.sendMessage(msg.chat.id, "üëãüèº");
  bot.stopPolling();
});


// —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–æ—Ç–∞
bot.onText(/\/start/, (msg) => {
  if (!bot.isPolling()) {
    bot.sendMessage(
      msg.chat.id,
      "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê—Ä–∫–∞–¥–∏–π, —è –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç, –ø–æ–≥–Ω–∞–ª–∏ –ø–æ–∫–∞–∂—É —á—ë –º–æ–≥—É üèÉüí®"
    );
    bot.startPolling();
  }
  console.log("start");
});

bot.onText(/\/conversion/, (msg) => {
  // —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç!
  bot.on("voice", (msg) => {
    const stream = bot.getFileStream(msg.voice.file_id);

    let chunks = [];
    stream.on("data", (chunk) => chunks.push(chunk));
    stream.on("end", () => {
      const axiosConfig = {
        method: "POST",
        url: "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize",
        headers: {
          Authorization: "Api-Key " + apiKeyYandex,
        },
        data: Buffer.concat(chunks),
      };
      try {
        axios(axiosConfig).then((response) => {
          const command = response.data.result;
          bot.sendMessage(msg.chat.id, "C–µ–∫—É–Ω–¥–æ—á–∫—É, —è –ø–æ—á—Ç–∏ –ø–µ—Ä–µ–≤–µ–ª . . .");
          setTimeout(() => {
            bot.sendMessage(msg.chat.id, command);
          }, 4000);
        });
        setTimeout(() => {
          const arr = [
            "üî•",
            "ü§ü",
            "üí•",
            "üí´",
            "üòé",
            "üöÄ",
            "üéØ",
            "üí™",
            "ü´∂",
            "üëè",
            "ü§©",
            "ü•≥",
            "ü§ì",
            "üëΩ",
            "üëæ",
            "üëç",
            "‚ú®",
            "üåù",
          ];

          function getRandomValueFromArray(arr) {
            const randomIndex = Math.floor(Math.random() * arr.length);
            return arr[randomIndex];
          }

          const randomValue = getRandomValueFromArray(arr);
          bot.sendMessage(msg.chat.id, "–≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üëÜ");
          bot.sendMessage(msg.chat.id, randomValue);
        }, 7000);
      } catch (error) {
        bot.sendMessage(
          msg.chat.id,
          "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–Ω—è—Ç–Ω–æ –≤—Å–æ–π —Ç–µ–∫—Å—Ç!"
        );
      }
    });
  });
  console.log("converter");
});

// —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –º—ã –ø—Ä–æ—Å—Ç–æ —á—Ç–æ-—Ç–æ –≤–≤–µ–ª–∏ –≤ –±–æ—Ç–∞
bot.on("message", (msg) => {
  if (msg.text && !msg.entities && !msg.reply_to_message) {
    bot.sendMessage(
      msg.chat.id,
      "–°–º–æ—Ç—Ä–∏, –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–æ –±—É–¥–µ—à—å –º–Ω–µ –ø–∏—Å–∞—Ç—å, —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑, —Ç–∞–∫ —á—Ç–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π ( —Ç—É—Ç –±—ã –∑–∞—à–ª–∞ —à—É—Ç–∫–∞ –ø—Ä–æ –±—ã–≤—à–µ–≥–æ üòÖ) –∫–æ—Ä–æ—á–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã, –≤–æ –≤–∫–ª–∞–¥–∫–µ –º–µ–Ω—é"
    );
  }
});
